// JSON parse: JSON is a notation or format that we put objects into in order to send them between server and project. 
// The parse() method in the JSON library will take the JSON object that the project recieves and return it to its former 
// normal object notation.

// JSON stringify: This is a method that does the exact opposite as the parse method, by formatting objects that we want to 
// send from our project into JSON so they can be sent.

// When we get a JSON object from the API we are working with we need to 
// convert it to the object type that we want. To do this, we use JSON.parse()

// JSON that we receive from server:
'{ "name":"John", "age":30, "city":"New York"}'

// To parse:
var obj = JSON.parse('{ "name":"John", "age":30, "city":"New York"}');

// The JSON.parse() method looks through the string that we received 
// from the server for specific notifiers and then turns that string into and object.


// When we have an object that we want to send to our controller in the API, 
// we need to first turn it to JSON so that it can be received in JSON

// Object we want to turn to JSON:
var obj = { name: "John", age: 30, city: "New York" };

// To stringify:
var myJSON = JSON.stringify(obj);

// FULL EXAMPLE: Stringify an object into JSON and send it, then receive the 
// same object in JSON and parse it to get the original object again.

var dataObject = {"data1": 100, "data2": 200, "data3": 300};
function getJSONdata() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            this.dataObject = JSON.parse(this.responseText);
       }
    };
    xhttp.open("GET", "ajax_info.txt", true);
    xhttp.send(JSON.stringify(this.dataObject));
}
